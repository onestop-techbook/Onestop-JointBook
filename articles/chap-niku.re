= 原稿を進める実運用

== 肉肉野菜肉野菜ご飯

合同誌の書き方の一つのメソッドとして、@<b>{肉肉野菜肉野菜ご飯}があります。ネタ出しに困ったときの一つの指針として取り上げます。

実際の技術系雑誌、電子工作やWeb Designでも、DOS/V系の本でもMacの本でもなんでも構いません。技術系の雑誌を一度見てみてください。肉肉野菜肉野菜ご飯という観点で見ると、納得できる例があるとおもいます。

=== 肉

特集記事です。表紙にあおりでタイトルが出るクラスの、この本の特集を@<b>{肉}と定義します。

肉が2～3本あると、その合同誌のメインを張れて、屋台骨ができます。逆に言うと、ここで肉を設定できないと、単なるごった煮本になってしまいます。著者を探す場合には、ここの著者をまず探すと良いでしょう。

肉には、今ホットなトピックス、あるいは編集長が一番書きたい・取り上げたいネタを持ってくることが望ましいです。これがこの本の（今回の）メインテーマです！と自信を持って言えるネタを探しましょう。

=== 野菜

箸休めな記事です。肉の内容とは異なるけれど、骨太な記事があると良いです。広く募集をかける合同誌では特にここを充実させることで、本の厚みと内容の厚みを確保できます。

雑誌においては、連載記事でもあります。

=== ご飯

単発コラムあるいは初めての人向けの軽い記事などです。軽くていいですし、毛色の違う記事でも良いです。ご飯で締めるというわけではありませんが、

== Gitでの執筆の管理（Push/Pull Request）について

Gitで原稿を管理してまとめていく場合に悩ましいのは、MasterへのPushを可とするのか、です。編集長以外が直接原稿を修正できるようにするのか、という点です。権限にも関わってきますが、合同誌においては、原則直接Push/あるいはPull Requestのセルフマージを可とする、むしろ積極的に推奨するというスタンスで良いと考えます。

 * こまめなPush/PRを推奨します。
 * MasterブランチへのPush、プルリクのセルフマージを推奨します。
 * CIのエラーは、できるだけ本人で直してください。（わからなければ編集長まで）

この3つの注意書きを募集要項に書いておけばよいでしょう。

また、Organizationのメンバーにユーザーを追加すること、追加できたら権限/動作チェックをやってもらうようにしましょう。

直接Push、PR-セルフマージのメリット

=== 編集長の負荷が減る

編集長が確認してからマージするという方式にした場合、当然ながら編集長が確認しないことには原稿がマージされません。編集長がいつでも確認できるわけではありませんし、各ブランチまで見に行かないですよね。そういう意味で、原稿の遊び時間が増えてしまいます。常時マージされていれば、それぞれの著者のワークフォルダにも最新原稿が届くようになります。

編集長がボトルネックになるようなことは避けておいたほうがいいでしょう。

=== 直接Push/セルフマージ時のエラー混入

ソフトウエアと異なり、原稿ファイルであれば「予期せぬ挙動・バグ」が混入するという可能性は殆どありません。CIを走らせていれば、Re:view構文のミスなどはそちらで見つけてもらえます（CIのコンパイルにミスる、表示がずれる、章のネストが変になる等はありえます）。これらは、原則Pushした著者が直すように、と明記・周知すると良いでしょう。

=== コンフリクトの可能性が減る
同じファイルを別々に編集し、合体させようとしたときに変更箇所が競合し自動でマージできない状態をコンフリクトといいますが、Push/PRマージが自分でできることで、リモートのMasterブランチを常に最新にすることができます。プルリクが溜まってMasterはいつまでも更新されないといった状況を回避することで、コンフリクトの可能性が減ります。

また、こうしておけばコンフリクトの修正も容易になります。

合同誌においてコンフリクトが発生しやすい場所は、各章のファイルではなく、Catalog.ymlかContributionsになる場合が多いです。しかも、追加しようとしたらコンフリクトした、というシチュエーションが多いと想定します。

コンフリクトも直すのは著者か、編集長になろうかと思いますが、「両方を生かす」という編集をすれば良いことになります。

プルリクでコンフリクトのチェックをし、必要であれば直し、自分でマージする。

このループを適切に回すことができれば、一晩寝て起きたら原稿が30ページ増えているという奇跡体験を目のあたりにできる可能性があるでしょう。